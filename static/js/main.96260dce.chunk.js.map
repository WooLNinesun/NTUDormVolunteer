{"version":3,"sources":["components/CardView.tsx","components/DataViewTab.tsx","components/TabSidebar.tsx","components/Loading.tsx","GoogleSheetData.ts","BetterSheetApp.tsx","serviceWorker.ts","index.tsx"],"names":["CardView","props","headerContent","rowDatas","react_default","a","createElement","className","Card","Group","centered","doubling","map","rowData","index","key","fluid","Content","Table","definition","Body","name","Row","Cell","width","defaultProps","DataView","worksheet","infos","Header","as","textAlign","dividing","title","undefined","Segment","react_markdown_default","source","src_components_CardView","Object","keys","data","TabSidebar","tabMenuItems","linkMenuItems","_React$useState","React","useState","_React$useState2","slicedToArray","mobileSidebarVisible","setMobileSidebarVisible","_React$useState3","_React$useState4","ActiveIndex","setActiveIndex","handelMenuItemClick","event","menuItems","Fragment","Menu","Item","header","menuItem","active","onClick","icon","Icon","Divider","horizontal","href","target","tabPanel","Grid","Column","panel","columns","only","Sidebar","Pushable","vertical","animation","color","onHide","visible","Pusher","dimmed","borderless","compact","fixed","size","inverted","fitted","pointing","secondary","Loading","isLoading","children","react_spinners","loading","sizeUnit","defaultSettings","links","_callee2","url","regenerator_default","wrap","_context2","prev","next","abrupt","fetchJson","then","_ref","asyncToGenerator","mark","_callee","result","rawWorksheetDatas","_context","feed","entry","getStringFromRawObject","getWorksheetDatasFromEntries","worksheetDatas","stop","_x3","apply","this","arguments","settings","forEach","rawWorksheetData","push","getSettingsFromWorksheetData","fetch","response","json","$t","worksheetData","defaultSettingData","attribute","arguments1","arguments2","setting","assign","_x2","_getWorksheetDatasFromEntries","_callee3","entries","_loop","_context4","sheetTitle","sheetLink","getWorksheetLink","link","_context3","filter","indexOf","headerName","substring","content","length","delegateYield","find","test","rel","concat","BetterSheetApp","setIsLoading","setTitle","_React$useState5","_React$useState6","setSettings","_React$useState7","_React$useState8","setWorksheetDatas","useEffect","sheetID","URLSearchParams","window","location","search","get","apiQuery","_x","_getSheetDatas","getSheetData","displayTitle","src_components_Loading","src_components_TabSidebar","components_DataViewTab","Boolean","hostname","match","ReactDOM","render","src_BetterSheetApp_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96260dce.chunk.js","sourcesContent":["import React from 'react';\n\nimport './CardView.scss';\n\nimport { Card, Table } from 'semantic-ui-react';\n\nimport { RowData } from '../interface';\n\ninterface CardViewProps {\n  headerContent: string[],\n  rowDatas: RowData[]\n};\n\nconst CardView: React.FunctionComponent<CardViewProps> = (props) => {\n  const { headerContent, rowDatas } = props;\n  return (\n    <div className='card-view'>\n      <Card.Group centered doubling>\n        {rowDatas.map((rowData, index) => (\n          <Card key={index} fluid>\n            <Card.Content>\n              <Table definition>\n                <Table.Body>\n                  {headerContent.map((name, index) => {\n                    return (\n                      <Table.Row key={index} >\n                        <Table.Cell width={4}>{name}</Table.Cell>\n                        <Table.Cell>{rowData[name]}</Table.Cell>\n                      </Table.Row>\n                    )\n                  })}\n                </Table.Body>\n              </Table>\n            </Card.Content>\n          </Card>\n        ))}\n      </Card.Group>\n    </div>\n  );\n}\n\nCardView.defaultProps = {\n  headerContent: [],\n  rowDatas: []\n}\n\nexport default CardView;\n","import React from 'react';\n\nimport { Header, Segment } from 'semantic-ui-react';\nimport ReactMarkdown from 'react-markdown';\nimport CardView from './CardView';\n\nimport './DataViewTab.scss';\nimport 'github-markdown-css'\n\nimport { WorksheetData } from '../interface';\n\ninterface DataViewProps {\n  worksheet: WorksheetData\n  infos: string\n};\n\nconst DataView: React.FunctionComponent<DataViewProps> = (props) => {\n  const { worksheet, infos } = props;\n\n  return (\n    <div className='data-view-tab'>\n      <Header as='h1' textAlign='center' dividing>{worksheet.title}</Header>\n      {\n        (infos !== '' && infos !== undefined) ? (\n          <Segment className=\"markdown-body\">\n            <ReactMarkdown source={infos} />\n          </Segment>\n        ) : null\n      }\n      <CardView\n        headerContent={Object.keys(worksheet.data[0] || {})}\n        rowDatas={worksheet.data}\n      />\n    </div>\n  );\n}\n\nexport default DataView;\n","import React from 'react';\n\nimport './TabSidebar.scss';\n\nimport { Sidebar, Grid, Menu, Icon, Divider, Header } from 'semantic-ui-react';\n\nimport { MenuItems } from '../interface';\n\ninterface TabSidebarProps {\n  title: string,\n  tabMenuItems: MenuItems[],\n  linkMenuItems: MenuItems[],\n};\n\nconst TabSidebar: React.FunctionComponent<TabSidebarProps> = (props) => {\n  const { title, tabMenuItems, linkMenuItems } = props;\n\n  const [mobileSidebarVisible, setMobileSidebarVisible] = React.useState<boolean>(false);\n\n  const [ActiveIndex, setActiveIndex] = React.useState<number>(0);\n  const handelMenuItemClick = (event: React.SyntheticEvent, data: any) => {\n    setActiveIndex(data['index']);\n    setMobileSidebarVisible(false);\n  }\n\n  const menuItems = (<React.Fragment>\n    <Menu.Item header>{title}</Menu.Item>\n    {tabMenuItems.map((menuItem, index) => (\n      <Menu.Item key={index}\n        index={index} active={ActiveIndex === index}\n        onClick={handelMenuItemClick} icon\n      ><Icon name='table'></Icon>\n        {menuItem.name}\n      </Menu.Item>\n    ))}\n    <Divider horizontal><Header as='h6'>Links</Header></Divider>\n    {linkMenuItems.map((menuItem, index) => (\n      <Menu.Item key={index} icon as='a' href={menuItem.href} target='__blank'>\n        <Icon name='external alternate'></Icon>\n        {menuItem.name}\n      </Menu.Item>\n    ))}\n  </React.Fragment>);\n\n  const tabPanel = (<Grid>\n    {tabMenuItems.map((menuItems, index) =>\n      <Grid.Column key={index} className={(ActiveIndex === index) ? '' : 'hidden'}>\n        {menuItems.panel}\n      </Grid.Column>\n    )}\n  </Grid>);\n\n  return (<Grid>\n    <Grid.Row columns={1} only='mobile tablet'>\n      <Sidebar.Pushable as={Grid.Column} className='mobile-sidebar-container'>\n        <Sidebar\n          as={Menu} vertical animation='overlay' color='blue'\n          onHide={() => setMobileSidebarVisible(false)} visible={mobileSidebarVisible}\n        >{menuItems}\n        </Sidebar>\n        <Sidebar.Pusher dimmed={mobileSidebarVisible}>\n          <Menu borderless compact fixed='left' size='small' inverted color='blue'>\n            <Menu.Item\n              className='mobile-sidebar-toggle'\n              onClick={() => setMobileSidebarVisible(true)}\n            ><Icon fitted name='sidebar'></Icon>\n            </Menu.Item>\n          </Menu>\n          {tabPanel}\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n    </Grid.Row>\n    <Grid.Row columns={1} only='computer'>\n      <Sidebar.Pushable as={Grid.Column} className='computer-sidebar-container'>\n        <Menu vertical fixed='left' pointing secondary color='blue'\n        >{menuItems}\n        </Menu>\n        <Sidebar.Pusher>\n          {tabPanel}\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n    </Grid.Row>\n  </Grid>);\n}\n\nexport default TabSidebar;\n","import React from 'react';\n\nimport './Loading.scss';\n\nimport { Header } from 'semantic-ui-react';\nimport { ClipLoader } from 'react-spinners';\n\ninterface LoadingProps {\n  isLoading: boolean\n};\n\nconst Loading: React.FunctionComponent<LoadingProps> = (props) => {\n  const { isLoading, children } = props;\n  const color = '#4A90E2';\n\n  return <React.Fragment>\n    {isLoading ? (\n      <div className='loading-container'>\n        <ClipLoader\n          loading={isLoading} color={color}\n          sizeUnit={'px'} size={100}\n        />\n        <Header className='loading-text' textAlign='center'>Loading Data...</Header>\n      </div>\n    ) : children}\n  </React.Fragment>;\n}\n\nLoading.defaultProps = {\n  isLoading: true\n}\n\nexport default Loading;\n","import {\n  SheetData, WorksheetData, RowData, Settings,\n  SheetRawObject, WorksheetLink, WorksheetEntry, WorksheetRowEntry\n} from './interface';\n\nexport const defaultSettings: Settings = { title: '', links: [], infos: {} };\nexport default async function getSheetDatas(url: string): Promise<SheetData> {\n  return fetchJson(url)\n    // Get title, rawWorksheetDatas.\n    .then(async (result) => {\n      let title: string = '';\n      let rawWorksheetDatas: WorksheetData[] = [];\n\n      if (result && result.feed && result.feed.title && result.feed.entry) {\n        title = getStringFromRawObject(result.feed.title);\n        await getWorksheetDatasFromEntries(result.feed.entry).then((worksheetDatas) => {\n          rawWorksheetDatas = worksheetDatas;\n        });\n      }\n\n      return { title, rawWorksheetDatas };\n    })\n    // Get settings and worksheetData.\n    .then((result) => {\n      let settings: Settings = defaultSettings;\n      let worksheetDatas: WorksheetData[] = [];\n\n      result.rawWorksheetDatas.forEach((rawWorksheetData) => {\n        if (rawWorksheetData.title === 'Settings') {\n          settings = getSettingsFromWorksheetData(rawWorksheetData);\n          return;\n        }\n        worksheetDatas.push(rawWorksheetData);\n      });\n\n      return { title: result.title, settings, worksheetDatas };\n    });\n}\n\nfunction fetchJson(url: string) {\n  return fetch(url).then(response => response.json());\n}\n\nfunction getStringFromRawObject(title: SheetRawObject): string {\n  return (title && title.$t) ? title.$t : '';\n}\n\nfunction getSettingsFromWorksheetData(worksheetData: WorksheetData): Settings {\n  const defaultSettingData: RowData = { attribute: '', arguments1: '', arguments2: '' };\n  let settings: Settings = defaultSettings;\n\n  worksheetData.data.forEach((rowData: RowData) => {\n    const setting = Object.assign(defaultSettingData, rowData);\n\n    if (setting.attribute === 'title') {\n      settings.title = setting.arguments1;\n    }\n\n    if (setting.attribute === 'links' && setting.arguments1 !== '') {\n      settings.links.push({\n        name: setting.arguments1,\n        href: setting.arguments2\n      });\n    }\n\n    if (setting.attribute === 'infos' && setting.arguments1 !== '') {\n      settings.infos[setting.arguments1] = setting.arguments2;\n    }\n  });\n  return settings;\n}\n\nexport async function getWorksheetDatasFromEntries(entries: WorksheetEntry[]):\n  Promise<WorksheetData[]> {\n  let worksheetDatas: WorksheetData[] = [];\n\n  // Get title and link.\n  entries.forEach((entry: WorksheetEntry) => {\n    const sheetTitle = getStringFromRawObject(entry.title);\n    const sheetLink = getWorksheetLink(entry.link, /#listfeed/);\n\n    if (sheetTitle === '' || sheetLink === '') { return; }\n\n    worksheetDatas.push({ title: sheetTitle, link: sheetLink, data: [] });\n  });\n\n  // Get datas\n  for (let index = 0; index < worksheetDatas.length; index++) {\n    const worksheetData = worksheetDatas[index];\n\n    await fetchJson(worksheetData.link).then((result) => {\n      if (result && result.feed && result.feed.entry) {\n        const data = getRowDataFromEntries(result.feed.entry);\n        worksheetDatas[index].data = data;\n      }\n    });\n  }\n  return worksheetDatas;\n}\n\nfunction getWorksheetLink(links: WorksheetLink[], target: RegExp): string {\n  const link: WorksheetLink | undefined = links.find(link => target.test(link.rel));\n  return link ? `${link.href}?alt=json` : '';\n}\n\nfunction getRowDataFromEntries(entries: WorksheetRowEntry[]): RowData[] {\n  return entries.map((entry: WorksheetRowEntry): RowData => {\n    let rowData: RowData = {};\n    Object.keys(entry)\n      .filter(key => (key.indexOf('gsx$') > -1))\n      .forEach((key: string): void => {\n        const headerName = key.substring(4);\n        const content = getStringFromRawObject(entry[key]);\n        rowData[headerName] = content;\n      });\n    return rowData;\n  });\n}\n","import React from 'react';\n\nimport './BetterSheetApp.scss';\n\nimport DataViewTab from './components/DataViewTab';\nimport TabSidebar from './components/TabSidebar';\nimport Loading from './components/Loading';\n\nimport getSheetData, { defaultSettings } from './GoogleSheetData';\n\nimport { WorksheetData, Settings } from './interface';\n\nconst BetterSheetApp: React.FunctionComponent<{}> = () => {\n  const [isLoading, setIsLoading] = React.useState<boolean>(true);\n  const [title, setTitle] = React.useState<string>('');\n  const [settings, setSettings] = React.useState<Settings>(defaultSettings);\n  const [worksheetDatas, setWorksheetDatas] = React.useState<WorksheetData[]>([]);\n\n  React.useEffect(() => {\n    const urlParams: URLSearchParams = new URLSearchParams(window.location.search);\n    let sheetID: string = urlParams.get('sheetid') || '';\n\n    if (sheetID === '') {\n      sheetID = '1WWh4gfO9Iak3XzPZb0CYN4_N-g5bALiDZsnN97qn0nk';\n    }\n\n    const apidomain: string = 'https://spreadsheets.google.com';\n    const apiQuery: string = `feeds/worksheets/${sheetID}/public/values?alt=json`;\n    const apiUrl: string = `${apidomain}/${apiQuery}`;\n\n    // Set Settings, Worksheets and isLoading state\n    getSheetData(apiUrl).then((result) => {\n      setTitle(result.title);\n      setSettings(result.settings);\n      setWorksheetDatas(result.worksheetDatas);\n      setIsLoading(false);\n    });\n  }, []);\n\n  const displayTitle = settings.title || title;\n\n  return (\n    <Loading isLoading={isLoading} >\n      <TabSidebar\n        title={displayTitle}\n        tabMenuItems={worksheetDatas.map((worksheetData) => ({\n          name: worksheetData.title,\n          panel: (\n            <DataViewTab\n              worksheet={worksheetData}\n              infos={settings.infos[worksheetData.title]}\n            />\n          )\n        }))}\n        linkMenuItems={settings.links} />\n    </Loading>\n  );\n}\n\nexport default BetterSheetApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // 'Content is cached for offline use.' message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11'\nimport 'react-app-polyfill/stable'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './static/semantic/semantic.min.css';\nimport './index.scss';\n\nimport BetterSheetApp from './BetterSheetApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BetterSheetApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}