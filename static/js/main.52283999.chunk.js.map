{"version":3,"sources":["components/CardView.tsx","utilities/gsx.ts","DataViewTab.tsx","components/TabSidebar.tsx","GSXToWebApp.tsx","serviceWorker.ts","index.tsx"],"names":["CardView","props","isLoading","headerContent","rowDatas","react_default","a","createElement","className","Card","Group","centered","doubling","map","rowData","index","key","fluid","Content","Table","definition","Body","name","Row","Cell","width","defaultProps","getStringFromRawObject","title","$t","getRowDataFromWorksheetEntries","entries","entry","Object","keys","filter","indexOf","forEach","headerName","substring","content","DataView","worksheet","_React$useState","React","useState","_React$useState2","slicedToArray","setIsLoading","_React$useState3","_React$useState4","setRowDatas","useEffect","fetch","link","then","response","json","result","feed","error","Header","as","textAlign","dividing","src_components_CardView","TabSidebar","tabMenuItems","linkMenuItems","mobileSidebarVisible","setMobileSidebarvisible","handleMobileSidebarHide","ActiveIndex","setActiveIndex","handelMenuItemClick","event","data","menuItems","Fragment","Menu","Item","header","menuItem","active","onClick","icon","Icon","Divider","horizontal","href","target","tabPanel","Grid","Column","floated","panel","columns","only","Sidebar","Pushable","vertical","animation","color","onHide","visible","Pusher","dimmed","borderless","compact","fixed","size","fitted","pointing","secondary","defaultSettings","links","defaultSettingData","attribute","linkRegexp","RegExp","GSXToWebApp","setTitle","_React$useState5","_React$useState6","settings","setSettings","_React$useState7","_React$useState8","worksheets","setWorksheets","getWorksheetDataFromEntries","sheetTitle","sheetLink","find","test","rel","concat","getWorksheetLink","push","rawSettings","rawSetting","assign","matches","match","sheetID","URLSearchParams","window","location","search","get","apiQuery","apiUrl","src_components_TabSidebar","src_DataViewTab","Boolean","hostname","ReactDOM","render","src_GSXToWebApp_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.52283999.chunk.js","sourcesContent":["import React from 'react';\n\nimport './CardView.css';\n\nimport { Card, Table } from \"semantic-ui-react\";\n\nimport { RowData } from '../interface/app';\n\ninterface CardViewProps {\n  isLoading: boolean,\n  headerContent: string[],\n  rowDatas: RowData[]\n};\n\nconst CardView: React.FunctionComponent<CardViewProps> = (props: CardViewProps) => {\n  const { isLoading, headerContent, rowDatas } = props;\n  return (\n    <div className=\"card-view\">\n      <Card.Group centered doubling>\n        {isLoading ? \"\" : rowDatas.map((rowData, index) => {\n          return (\n            <Card key={index} fluid>\n              <Card.Content>\n                <Table definition>\n                  <Table.Body>\n                    {headerContent.map((name, index) => {\n                      return (\n                        <Table.Row key={index} >\n                          <Table.Cell width={4}>{name}</Table.Cell>\n                          <Table.Cell>{rowData[name]}</Table.Cell>\n                        </Table.Row>\n                      )\n                    })}\n                  </Table.Body>\n                </Table>\n              </Card.Content>\n            </Card>\n          )\n        })}\n      </Card.Group>\n    </div>\n  );\n}\n\nCardView.defaultProps = {\n  isLoading: false,\n  headerContent: [],\n  rowDatas: []\n}\n\nexport default CardView;\n","import { SheetRawObject, WorksheetCellEntry } from '../interface/gsx';\nimport { RowData } from '../interface/app';\n\nexport function getStringFromRawObject(title: SheetRawObject): string {\n  return (title && title.$t) ? title.$t : \"\";\n}\n\nexport function getRowDataFromWorksheetEntries(entries: WorksheetCellEntry[]): RowData[] {\n  return entries.map((entry: WorksheetCellEntry): RowData => {\n    let rowData: RowData = {};\n    Object.keys(entry)\n      .filter(key => (key.indexOf('gsx$') > -1))\n      .forEach((key: string): void => {\n        const headerName = key.substring(4);\n        const content = getStringFromRawObject(entry[key]);\n        rowData[headerName] = content;\n      });\n    return rowData;\n  });\n}\n","import React from 'react';\n\nimport { Header } from \"semantic-ui-react\";\nimport CardView from \"./components/CardView\";\n\nimport './DataViewTab.css';\n\nimport { getRowDataFromWorksheetEntries } from './utilities/gsx';\n\nimport { RowData } from './interface/app';\n\ninterface DataViewProps {\n  worksheet: {\n    title: string,\n    link: string\n  }\n};\n\nconst DataView: React.FunctionComponent<DataViewProps> = (props: DataViewProps) => {\n  const { worksheet } = props;\n\n  // const [isError, setIsError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = React.useState<boolean>(true);\n  const [rowDatas, setRowDatas] = React.useState<RowData[]>([]);\n\n  React.useEffect(() => {\n    fetch(worksheet.link)\n      .then(response => response.json())\n      .then((result) => {\n        setIsLoading(false);\n        setRowDatas(getRowDataFromWorksheetEntries(result.feed.entry));\n      }, (error) => {\n        // setIsError(true);\n      });\n  }, [worksheet]);\n\n  return (\n    <div className=\"data-view-tab\">\n      <Header as=\"h1\" textAlign=\"center\" dividing>{worksheet.title}</Header>\n      <CardView\n        isLoading={isLoading}\n        headerContent={Object.keys(rowDatas[0] || {})}\n        rowDatas={rowDatas}\n      />\n    </div>\n  );\n}\n\nexport default DataView;\n","import React from 'react';\n\nimport './TabSidebar.css';\n\nimport { Sidebar, Grid, Menu, Icon, Divider, Header } from \"semantic-ui-react\";\n\nimport { MenuItems } from '../interface/app';\n\ninterface TabSidebarProps {\n  title: string,\n  tabMenuItems: MenuItems[],\n  linkMenuItems: MenuItems[],\n};\n\nconst TabSidebar: React.FunctionComponent<TabSidebarProps> = (props) => {\n  const { title, tabMenuItems, linkMenuItems } = props;\n\n  const [mobileSidebarVisible, setMobileSidebarvisible] = React.useState<boolean>(false);\n  const handleMobileSidebarShow = () => setMobileSidebarvisible(true);\n  const handleMobileSidebarHide = () => setMobileSidebarvisible(false);\n\n  const [ActiveIndex, setActiveIndex] = React.useState<number>(0);\n  const handelMenuItemClick = (event: React.SyntheticEvent, data: any) => {\n    setActiveIndex(data['index']);\n    handleMobileSidebarHide();\n  }\n\n  const menuItems = (<React.Fragment>\n    <Menu.Item header>{title}</Menu.Item>\n    {tabMenuItems.map((menuItem, index) => (\n      <Menu.Item key={index}\n        index={index} active={ActiveIndex === index}\n        onClick={handelMenuItemClick} icon\n      ><Icon name=\"table\"></Icon>\n        {menuItem.name}\n      </Menu.Item>\n    ))}\n    <Divider horizontal><Header as='h6'>Links</Header></Divider>\n    {linkMenuItems.map((menuItem, index) => (\n      <Menu.Item key={index} icon as=\"a\" href={menuItem.href} target=\"__blank\">\n        <Icon name=\"external alternate\"></Icon>\n        {menuItem.name}\n      </Menu.Item>\n    ))}\n  </React.Fragment>);\n\n  type width = 1 | 2 | 7 | 6 | 5 | 4 | 3 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16;\n  const tabPanel = (width: width) => (\n    <Grid className='app-container'>\n      {tabMenuItems.map((menuItems, index) =>\n        <Grid.Column key={index}\n          className={(ActiveIndex === index) ? \"\" : \"hidden\"}\n          floated='right' width={width}\n        >{menuItems.panel}\n        </Grid.Column>\n      )}\n    </Grid>\n  );\n\n  return (<Grid>\n    <Grid.Row columns={1} only='mobile tablet'>\n      <Sidebar.Pushable as={Grid.Column} className='mobile-sidebar-container'>\n        <Sidebar\n          as={Menu} vertical animation='overlay' color='blue'\n          onHide={handleMobileSidebarHide} visible={mobileSidebarVisible}\n        >{menuItems}\n        </Sidebar>\n        <Sidebar.Pusher dimmed={mobileSidebarVisible}>\n          <Menu borderless compact fixed=\"left\" size=\"small\">\n            <Menu.Item\n              className=\"mobile-sidebar-toggle\"\n              onClick={handleMobileSidebarShow}\n            ><Icon fitted name=\"sidebar\"></Icon>\n            </Menu.Item>\n          </Menu>\n          {tabPanel(15)}\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n    </Grid.Row>\n    <Grid.Row columns={1} only='computer'>\n      <Sidebar.Pushable as={Grid.Column} className='computer-sidebar-container'>\n        <Menu vertical fixed=\"left\" pointing secondary color='blue'>\n          {menuItems}\n        </Menu>\n        <Sidebar.Pusher>\n          {tabPanel(13)}\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n    </Grid.Row>\n  </Grid>);\n}\n\nexport default TabSidebar;\n","import React from 'react';\n\nimport './static/semantic/semantic.min.css';\nimport './GSXToWebApp.css';\n\nimport DataViewTab from \"./DataViewTab\";\nimport TabSidebar from \"./components/TabSidebar\";\n\nimport { getStringFromRawObject, getRowDataFromWorksheetEntries } from './utilities/gsx';\n\nimport { WorksheetLink, WorksheetEntry } from './interface/gsx';\nimport { RowData, WorksheetData, Settings } from './interface/app';\n\nconst defaultSettings: Settings = { title: \"\", links: [] };\nconst defaultSettingData: RowData = { attribute: \"\", content: \"\" };\nconst linkRegexp = new RegExp(/^\\[(.+)\\]\\((.+)\\)$/);\n\nconst GSXToWebApp: React.FunctionComponent<{}> = () => {\n  const [isLoading, setIsLoading] = React.useState<boolean>(true);\n  const [title, setTitle] = React.useState<string>(\"\");\n  const [settings, setSettings] = React.useState<Settings>(defaultSettings);\n  const [worksheets, setWorksheets] = React.useState<WorksheetData[]>([]);\n\n  React.useEffect(() => {\n    const getSettingsFromWorksheet = (WorksheetUrl: string) => {\n      fetch(WorksheetUrl)\n        .then(response => response.json())\n        .then((result) => {\n          if (result && result.feed && result.feed.title && result.feed.entry) {\n            let rawSettings: Settings = defaultSettings;\n            getRowDataFromWorksheetEntries(result.feed.entry).forEach(\n              (rowData: RowData) => {\n                const rawSetting = Object.assign(defaultSettingData, rowData);\n\n                if (rawSetting.attribute === \"title\") {\n                  rawSettings.title = rawSetting.content;\n                }\n\n                if (rawSetting.attribute === \"links\") {\n                  const matches: string[] = rawSetting.content.match(linkRegexp) || [];\n                  rawSettings.links.push({ name: matches[1], href: matches[2] });\n                }\n              }\n            );\n            setSettings(rawSettings);\n          }\n        }, (error) => {\n          // setIsError(true);\n        });\n    }\n\n    const getWorksheetLink = (links: WorksheetLink[], target: RegExp): string => {\n      const link: WorksheetLink | undefined = links.find(link => target.test(link.rel));\n      return link ? `${link.href}?alt=json` : \"\";\n    }\n\n    const getWorksheetDataFromEntries = (entries: WorksheetEntry[]): WorksheetData[] => {\n      let worksheets: WorksheetData[] = [];\n      entries.forEach((entry: WorksheetEntry) => {\n        const sheetTitle = getStringFromRawObject(entry.title);\n        const sheetLink = getWorksheetLink(entry.link, /#listfeed/);\n\n        if (sheetTitle === \"\" || sheetLink === \"\") { return; }\n        if (sheetTitle === \"Settings\") { getSettingsFromWorksheet(sheetLink); return; }\n\n        worksheets.push({ title: sheetTitle, link: sheetLink });\n      });\n      return worksheets;\n    }\n\n    const urlParams: URLSearchParams = new URLSearchParams(window.location.search);\n    let sheetID: string = urlParams.get('sheetid') || \"\";\n\n    if (sheetID === \"\") {\n      sheetID = \"1WWh4gfO9Iak3XzPZb0CYN4_N-g5bALiDZsnN97qn0nk\";\n      // setIsError(true);\n      // return\n    }\n\n    const apidomain: string = \"https://spreadsheets.google.com\";\n    const apiQuery: string = `feeds/worksheets/${sheetID}/public/values?alt=json`;\n    const apiUrl: string = `${apidomain}/${apiQuery}`;\n\n    fetch(apiUrl)\n      .then(response => response.json())\n      .then((result) => {\n        if (result && result.feed && result.feed.title && result.feed.entry) {\n          setTitle(getStringFromRawObject(result.feed.title));\n          setWorksheets(getWorksheetDataFromEntries(result.feed.entry));\n          setIsLoading(false);\n        }\n      }, (error) => {\n        // setIsError(true);\n      });\n  }, []);\n\n  return <React.Fragment>{\n    isLoading ? \"\" : (\n      <TabSidebar\n        title={settings.title || title}\n        tabMenuItems={worksheets.map((worksheet) => ({\n          name: worksheet.title,\n          panel: (<DataViewTab worksheet={worksheet} />)\n        }))}\n        linkMenuItems={settings.links} />\n    )\n  }</React.Fragment>;\n}\n\nexport default GSXToWebApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\nimport GSXToWebApp from './GSXToWebApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<GSXToWebApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}