{"version":3,"sources":["components/CardView.tsx","components/DataViewTab.tsx","components/TabSidebar.tsx","components/Loading.tsx","utilities/gsx.ts","utilities/app.ts","BetterSheetApp.tsx","serviceWorker.ts","index.tsx"],"names":["CardView","props","headerContent","rowDatas","react_default","a","createElement","className","Card","Group","centered","doubling","map","rowData","index","key","fluid","Content","Table","definition","Body","name","Row","Cell","width","defaultProps","DataView","worksheet","infos","Header","as","textAlign","dividing","title","undefined","Segment","react_markdown_default","source","src_components_CardView","Object","keys","data","TabSidebar","tabMenuItems","linkMenuItems","_React$useState","React","useState","_React$useState2","slicedToArray","mobileSidebarVisible","setMobileSidebarVisible","_React$useState3","_React$useState4","ActiveIndex","setActiveIndex","handelMenuItemClick","event","menuItems","Fragment","Menu","Item","header","menuItem","active","onClick","icon","Icon","Divider","horizontal","href","target","tabPanel","Grid","Column","panel","columns","only","Sidebar","Pushable","vertical","animation","color","onHide","visible","Pusher","dimmed","borderless","compact","fixed","size","inverted","fitted","pointing","secondary","Loading","isLoading","children","react_spinners","loading","sizeUnit","getStringFromRawObject","$t","getRowWorksheetDataFromEntries","entries","worksheets","forEach","entry","sheetTitle","sheetLink","links","link","find","test","rel","concat","getWorksheetLink","push","defaultSettings","defaultSettingData","attribute","arguments1","arguments2","BetterSheetApp","setIsLoading","setTitle","_React$useState5","_React$useState6","settings","setSettings","_React$useState7","_React$useState8","setWorksheets","useEffect","sheetID","URLSearchParams","window","location","search","get","apiQuery","apiUrl","fetch","then","response","json","_ref","asyncToGenerator","regenerator_default","mark","_callee2","result","_ret","wrap","_context3","prev","next","feed","delegateYield","_callee","rowWorksheetDatas","_loop","_context2","rowWorksheetData","_context","filter","indexOf","headerName","substring","content","stop","length","abrupt","v","t0","_x","apply","this","arguments","finalSettings","finalWorksheetDatas","worksheetData","setting","assign","getSettingsFromRawData","displayTitle","src_components_Loading","src_components_TabSidebar","components_DataViewTab","Boolean","hostname","match","ReactDOM","render","src_BetterSheetApp_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.95ae3f0c.chunk.js","sourcesContent":["import React from 'react';\n\nimport './CardView.scss';\n\nimport { Card, Table } from 'semantic-ui-react';\n\nimport { RowData } from '../interface/app';\n\ninterface CardViewProps {\n  headerContent: string[],\n  rowDatas: RowData[]\n};\n\nconst CardView: React.FunctionComponent<CardViewProps> = (props) => {\n  const { headerContent, rowDatas } = props;\n  return (\n    <div className='card-view'>\n      <Card.Group centered doubling>\n        {rowDatas.map((rowData, index) => (\n          <Card key={index} fluid>\n            <Card.Content>\n              <Table definition>\n                <Table.Body>\n                  {headerContent.map((name, index) => {\n                    return (\n                      <Table.Row key={index} >\n                        <Table.Cell width={4}>{name}</Table.Cell>\n                        <Table.Cell>{rowData[name]}</Table.Cell>\n                      </Table.Row>\n                    )\n                  })}\n                </Table.Body>\n              </Table>\n            </Card.Content>\n          </Card>\n        ))}\n      </Card.Group>\n    </div>\n  );\n}\n\nCardView.defaultProps = {\n  headerContent: [],\n  rowDatas: []\n}\n\nexport default CardView;\n","import React from 'react';\n\nimport { Header, Segment } from 'semantic-ui-react';\nimport ReactMarkdown from 'react-markdown';\nimport CardView from './CardView';\n\nimport './DataViewTab.scss';\nimport 'github-markdown-css'\n\nimport { WorksheetData } from '../interface/app';\n\ninterface DataViewProps {\n  worksheet: WorksheetData\n  infos: string\n};\n\nconst DataView: React.FunctionComponent<DataViewProps> = (props) => {\n  const { worksheet, infos } = props;\n\n  return (\n    <div className='data-view-tab'>\n      <Header as='h1' textAlign='center' dividing>{worksheet.title}</Header>\n      {\n        (infos !== '' && infos !== undefined) ? (\n          <Segment className=\"markdown-body\">\n            <ReactMarkdown source={infos} />\n          </Segment>\n        ) : null\n      }\n      <CardView\n        headerContent={Object.keys(worksheet.data[0] || {})}\n        rowDatas={worksheet.data}\n      />\n    </div>\n  );\n}\n\nexport default DataView;\n","import React from 'react';\n\nimport './TabSidebar.scss';\n\nimport { Sidebar, Grid, Menu, Icon, Divider, Header } from 'semantic-ui-react';\n\nimport { MenuItems } from '../interface/app';\n\ninterface TabSidebarProps {\n  title: string,\n  tabMenuItems: MenuItems[],\n  linkMenuItems: MenuItems[],\n};\n\nconst TabSidebar: React.FunctionComponent<TabSidebarProps> = (props) => {\n  const { title, tabMenuItems, linkMenuItems } = props;\n\n  const [mobileSidebarVisible, setMobileSidebarVisible] = React.useState<boolean>(false);\n\n  const [ActiveIndex, setActiveIndex] = React.useState<number>(0);\n  const handelMenuItemClick = (event: React.SyntheticEvent, data: any) => {\n    setActiveIndex(data['index']);\n    setMobileSidebarVisible(false);\n  }\n\n  const menuItems = (<React.Fragment>\n    <Menu.Item header>{title}</Menu.Item>\n    {tabMenuItems.map((menuItem, index) => (\n      <Menu.Item key={index}\n        index={index} active={ActiveIndex === index}\n        onClick={handelMenuItemClick} icon\n      ><Icon name='table'></Icon>\n        {menuItem.name}\n      </Menu.Item>\n    ))}\n    <Divider horizontal><Header as='h6'>Links</Header></Divider>\n    {linkMenuItems.map((menuItem, index) => (\n      <Menu.Item key={index} icon as='a' href={menuItem.href} target='__blank'>\n        <Icon name='external alternate'></Icon>\n        {menuItem.name}\n      </Menu.Item>\n    ))}\n  </React.Fragment>);\n\n  const tabPanel = (<Grid>\n    {tabMenuItems.map((menuItems, index) =>\n      <Grid.Column key={index} className={(ActiveIndex === index) ? '' : 'hidden'}>\n        {menuItems.panel}\n      </Grid.Column>\n    )}\n  </Grid>);\n\n  return (<Grid>\n    <Grid.Row columns={1} only='mobile tablet'>\n      <Sidebar.Pushable as={Grid.Column} className='mobile-sidebar-container'>\n        <Sidebar\n          as={Menu} vertical animation='overlay' color='blue'\n          onHide={() => setMobileSidebarVisible(false)} visible={mobileSidebarVisible}\n        >{menuItems}\n        </Sidebar>\n        <Sidebar.Pusher dimmed={mobileSidebarVisible}>\n          <Menu borderless compact fixed='left' size='small' inverted color='blue'>\n            <Menu.Item\n              className='mobile-sidebar-toggle'\n              onClick={() => setMobileSidebarVisible(true)}\n            ><Icon fitted name='sidebar'></Icon>\n            </Menu.Item>\n          </Menu>\n          {tabPanel}\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n    </Grid.Row>\n    <Grid.Row columns={1} only='computer'>\n      <Sidebar.Pushable as={Grid.Column} className='computer-sidebar-container'>\n        <Menu vertical fixed='left' pointing secondary color='blue'\n        >{menuItems}\n        </Menu>\n        <Sidebar.Pusher>\n          {tabPanel}\n        </Sidebar.Pusher>\n      </Sidebar.Pushable>\n    </Grid.Row>\n  </Grid>);\n}\n\nexport default TabSidebar;\n","import React from 'react';\n\nimport './Loading.scss';\n\nimport { Header } from 'semantic-ui-react';\nimport { ClipLoader } from 'react-spinners';\n\ninterface LoadingProps {\n  isLoading: boolean\n};\n\nconst Loading: React.FunctionComponent<LoadingProps> = (props) => {\n  const { isLoading, children } = props;\n  const color = '#4A90E2';\n\n  return <React.Fragment>\n    {isLoading ? (\n      <div className='loading-container'>\n        <ClipLoader\n          loading={isLoading} color={color}\n          sizeUnit={'px'} size={100}\n        />\n        <Header className='loading-text' textAlign='center'>Loading Data...</Header>\n      </div>\n    ) : children}\n  </React.Fragment>;\n}\n\nLoading.defaultProps = {\n  isLoading: true\n}\n\nexport default Loading;\n","import {\n  SheetRawObject, WorksheetLink, WorksheetEntry, WorksheetCellEntry\n} from '../interface/gsx';\nimport { RowData, WorksheetData } from '../interface/app';\n\nexport function getStringFromRawObject(title: SheetRawObject): string {\n  return (title && title.$t) ? title.$t : '';\n}\n\nexport function getWorksheetLink(links: WorksheetLink[], target: RegExp): string {\n  const link: WorksheetLink | undefined = links.find(link => target.test(link.rel));\n  return link ? `${link.href}?alt=json` : '';\n}\n\nexport function getRowWorksheetDataFromEntries(\n  entries: WorksheetEntry[]): WorksheetData[] {\n  let worksheets: WorksheetData[] = [];\n  entries.forEach((entry: WorksheetEntry) => {\n    const sheetTitle = getStringFromRawObject(entry.title);\n    const sheetLink = getWorksheetLink(entry.link, /#listfeed/);\n\n    if (sheetTitle === '' || sheetLink === '') { return; }\n\n    worksheets.push({ title: sheetTitle, link: sheetLink, data: [] });\n  });\n  return worksheets;\n}\n\nexport function getDataFromWorksheetEntries(entries: WorksheetCellEntry[]): RowData[] {\n  return entries.map((entry: WorksheetCellEntry): RowData => {\n    let rowData: RowData = {};\n    Object.keys(entry)\n      .filter(key => (key.indexOf('gsx$') > -1))\n      .forEach((key: string): void => {\n        const headerName = key.substring(4);\n        const content = getStringFromRawObject(entry[key]);\n        rowData[headerName] = content;\n      });\n    return rowData;\n  });\n}\n","import { RowData, WorksheetData, Settings } from '../interface/app';\n\nexport const defaultSettings: Settings = { title: '', links: [], infos: {} };\nconst defaultSettingData: RowData = { attribute: '', arguments1: '', arguments2: '' };\n\nexport function getSettingsFromRawData(worksheetData: WorksheetData): Settings {\n  let settings: Settings = defaultSettings;\n  worksheetData.data.forEach((rowData: RowData) => {\n    const setting = Object.assign(defaultSettingData, rowData);\n\n    if (setting.attribute === 'title') {\n      settings.title = setting.arguments1;\n    }\n\n    if (setting.attribute === 'links' && setting.arguments1 !== '') {\n      settings.links.push({\n        name: setting.arguments1,\n        href: setting.arguments2\n      });\n    }\n\n    if (setting.attribute === 'infos' && setting.arguments1 !== '') {\n      settings.infos[setting.arguments1] = setting.arguments2;\n    }\n  });\n  return settings;\n}\n","import React from 'react';\n\nimport './BetterSheetApp.scss';\n\nimport DataViewTab from './components/DataViewTab';\nimport TabSidebar from './components/TabSidebar';\nimport Loading from './components/Loading';\n\nimport {\n  getStringFromRawObject,\n  getRowWorksheetDataFromEntries,\n  getDataFromWorksheetEntries\n} from './utilities/gsx';\n\nimport {\n  defaultSettings,\n  getSettingsFromRawData\n} from './utilities/app';\n\nimport { WorksheetData, Settings } from './interface/app';\n\nconst BetterSheetApp: React.FunctionComponent<{}> = () => {\n  const [isLoading, setIsLoading] = React.useState<boolean>(true);\n  const [title, setTitle] = React.useState<string>('');\n  const [settings, setSettings] = React.useState<Settings>(defaultSettings);\n  const [worksheets, setWorksheets] = React.useState<WorksheetData[]>([]);\n\n  React.useEffect(() => {\n    const urlParams: URLSearchParams = new URLSearchParams(window.location.search);\n    let sheetID: string = urlParams.get('sheetid') || '';\n\n    if (sheetID === '') {\n      sheetID = '1WWh4gfO9Iak3XzPZb0CYN4_N-g5bALiDZsnN97qn0nk';\n    }\n\n    const apidomain: string = 'https://spreadsheets.google.com';\n    const apiQuery: string = `feeds/worksheets/${sheetID}/public/values?alt=json`;\n    const apiUrl: string = `${apidomain}/${apiQuery}`;\n\n    fetch(apiUrl)\n      .then(response => response.json())\n      // Set document title and Get RowWorksheetDatas.\n      .then(async (result) => {\n        if (result && result.feed && result.feed.title && result.feed.entry) {\n          setTitle(getStringFromRawObject(result.feed.title));\n\n          let rowWorksheetDatas = getRowWorksheetDataFromEntries(result.feed.entry);\n          for (let index = 0; index < rowWorksheetDatas.length; index++) {\n            const rowWorksheetData = rowWorksheetDatas[index];\n\n            await fetch(rowWorksheetData.link)\n              .then(response => response.json())\n              .then((result) => {\n                if (result && result.feed && result.feed.entry) {\n                  const data = getDataFromWorksheetEntries(result.feed.entry);\n                  rowWorksheetDatas[index].data = data;\n                }\n              });\n          }\n          return rowWorksheetDatas;\n        }\n      })\n      // Get finalSettings and finalWorksheetData.\n      .then((rowWorksheetDatas) => {\n        let finalSettings: Settings = defaultSettings;\n        let finalWorksheetDatas: WorksheetData[] = [];\n\n        if (rowWorksheetDatas) {\n          rowWorksheetDatas.forEach((rowWorksheetData) => {\n            if (rowWorksheetData.title === 'Settings') {\n              finalSettings = getSettingsFromRawData(rowWorksheetData);\n              return;\n            }\n            finalWorksheetDatas.push(rowWorksheetData);\n          });\n        }\n\n        return { settings: finalSettings, worksheets: finalWorksheetDatas };\n      })\n      // Set Settings, Worksheets and isLoading state\n      .then((result) => {\n        const { settings, worksheets } = result;\n        setSettings(settings);\n        setWorksheets(worksheets);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const displayTitle = settings.title || title;\n\n  return (\n    <Loading isLoading={isLoading} >\n      <TabSidebar\n        title={displayTitle}\n        tabMenuItems={worksheets.map((worksheet) => ({\n          name: worksheet.title,\n          panel: (\n            <DataViewTab\n              worksheet={worksheet}\n              infos={settings.infos[worksheet.title]}\n            />\n          )\n        }))}\n        linkMenuItems={settings.links} />\n    </Loading>\n  );\n}\n\nexport default BetterSheetApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // 'Content is cached for offline use.' message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11'\nimport 'react-app-polyfill/stable'\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './static/semantic/semantic.min.css';\nimport './index.scss';\n\nimport BetterSheetApp from './BetterSheetApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BetterSheetApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}